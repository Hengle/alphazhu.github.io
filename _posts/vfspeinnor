// Upgrade NOTE: replaced '_World2Object' with 'unity_WorldToObject'

Shader "TA/SpeInNorVF"
{
    Properties
    {
        _MainTex("Main Tex", 2D)                 = "white" {}
        _BumpTex("Bump Tex", 2D)                 = "bump" {}
//        _Ambient("Ambient Color", Color)         = (0.6, 0.6, 0.6, 1.0)
        _Color("Diffuse Color", Color)         = (0.7, 0.7, 0.8, 1.0)
        _Specular("Specular Color", Color)       = (1.0, 1.0, 1.0, 1.0)
//        _UseSceneLight("Use Scene Light", Float) = 1.0
//        _LightDir("Light Dir", Vector)           = (0.0, -1.0, 1.0, 0.0)
    }
    
    SubShader
    {
        Tags {"RenderType" = "Opaque"}
        
        Pass
        {
            CGPROGRAM
            #pragma vertex   vert
            #pragma fragment frag
            #include "UnityCG.cginc"
            
            // fragma input
            struct v2f
            {
                float4 pos      : SV_POSITION;
                float2 uv       : TEXCOORD0;
                float3 viewDir  : TEXCOORD1;
                float3 lightDir : TEXCOORD2;
            };
            
            sampler2D _MainTex;
            sampler2D _BumpTex;
//            float4    _Ambient;
            fixed4    _Color;
            fixed4    _Specular;
//            float     _UseSceneLight;
//            float4    _LightDir;
            
            v2f vert(appdata_full v)
            {
                v2f o;
                UNITY_INITIALIZE_OUTPUT(v2f, o);
                o.pos = mul(UNITY_MATRIX_MVP, v.vertex);
                o.uv  = v.texcoord;

                fixed3 tangent  = normalize(v.tangent);
                fixed3 normal   = normalize(v.normal);
                fixed3 binormal = normalize(cross(normal, v.tangent.xyz) * v.tangent.w);
                
                // All vector here is col vector, matrix is left mulpitlied.
                // So TBN matrix is [T, B, N], after normalized, TBN's inverse matrix is [T, B, N]T.
                fixed3x3 TBN;
                TBN[0] = tangent;
                TBN[1] = binormal;
                TBN[2] = normal;
                
                // We do not need this.
                //TBN = transpose(TBN);

                // Assume from view space.
                fixed3 viewDir  = ObjSpaceViewDir(v.vertex);
                fixed3 lightDir = float3(0, 0, 0);
//                if (_UseSceneLight > 0.0)
//                {
                    lightDir = ObjSpaceLightDir(v.vertex);
//                }
//                else
//                {
//                    lightDir = -mul(unity_WorldToObject, _LightDir);
//                }
                
                o.viewDir  = mul(TBN, ObjSpaceViewDir(v.vertex));
                o.lightDir = mul(TBN, lightDir);

                return o;
            }
            
            float4 frag(v2f i) : COLOR0
            {
                fixed3 viewDir  = normalize(i.viewDir);
                fixed3 lightDir = normalize(i.lightDir);
                
                half4 normalMap = tex2D(_BumpTex, i.uv);
                //float3 normalDir = normalize(normalMap * 2.0 - 1.0);
                fixed3 normalDir = normalize(normalMap.xyw * 2 -1);

//                float  s    = max(0, dot(lightDir, normalDir));
                fixed3 h    = normalize(viewDir + lightDir);
                fixed  r    = max(0, dot(h, normalDir));
                half  spec = pow(r, 100);
                half4 clr  = tex2D(_MainTex, i.uv);
                
                half4 c;
//                c.rgb = ((_Ambient + _Color * s) * clr.rgb + spec * _Specular.rgb * clr.a * 1.5) * 1.3;
					c.rgb = _Color * clr.rgb + spec * _Specular.rgb;
//                c.a   = clr.a;
                return c;
            }
            
            ENDCG
        }
    }
}
